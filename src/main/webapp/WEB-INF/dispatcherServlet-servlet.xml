<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

	<!-- 类似于数据源, 事务 AOP, Service,整合其他框架(Hibernate) 最好都放在Spring的配置文件中, SpringMVC 
		只负责handler的配置 问题: 如果Spring的IOC容器和SpringMVC的IOC容器扫描的包有重合的地方,那么会导致bean被创建两次 
		解决: 1).包分开,没有重合部分(实际不容易实现) 2). 使用exclude-filter 和 include-filter 子节点(use-defalut-filters=false) 
		SpringMVC IOC 的bean可以引用Spring IOC 中的bean, 反之不行!!!! -->

	<context:component-scan
		base-package="com.springmvc.handlers">
	</context:component-scan>
	<!-- 配置视图解析器: 如何把handler 方法返回值解析为实际的物理视图 -->
	<!-- 如果项目中使用了JSTL,那么Spring MCVC 会自动把InternalResourceView转换为JstlView -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	<!-- 自定义视图 -->
	<!-- 配置视图解析器BeanNameViewResolver -->
	<!-- 通过order设置视图解析器的优先级, order值越小优先级越高 -->
	<bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="100"></property>
	</bean>

	<!-- 配置18n <fmt:message key=""> -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean>

	<!-- 点击链接切换语言 -->
	<!-- SessionLocaleResolver -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
	<!--配置LocaleChangeInterceptor -->
	<mvc:interceptors>
		<!-- 配置自定义的Interceptors -->
		<bean class="com.springmvc.interceptors.FirstInterceptor"></bean>
		<!-- 指定拦截器作用域 -->
		<!-- 当有多个拦截器时:pre-handler按配置顺序, 其余相反 -->
		<mvc:interceptor>
			<mvc:mapping path="/springmvc" />
			<bean class="com.springmvc.interceptors.SecondInterceptor"></bean>
		</mvc:interceptor>
		<bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
	</mvc:interceptors>

	<!-- 1,直接访问WEB-INF下的页面, 无需经过handler -->
	<mvc:view-controller path="/success"
		view-name="success" />
	<mvc:view-controller path="/i18n" view-name="i18n" />
	<mvc:view-controller path="/i18n2"
		view-name="i18n2" />
	<!-- 2,允许请求静态资源 -->
	<mvc:default-servlet-handler />
	<!-- 在实际开发中需要 配置mvc:annotation-driven -->
	<!-- 当使用上述1,2时 需要配置 -->
	<!-- 当自定义类型转换器 conversionService时也需要 -->
	<!--数据格式化: 例如Date, model中Date参数,表格中要填如1995/11/27转换成Date类型->在参数前添加注解@DateTimeFormat(pattern="year/month/day") 
		@NumberFormat(pattern="#,###,##") -->
	<!-- <mvc:annotation-driven></mvc:annotation-driven> -->

	<!--如果添加了自定义类型转换器 -->
	<mvc:annotation-driven
		conversion-service="conversionService" />
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<ref bean="employeeConverter" />
			</set>
		</property>
	</bean>

	<!-- 配置MultipartResolver -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF_8"></property>
		<property name="maxUploadSize" value="1024000"></property>
	</bean>
</beans>
